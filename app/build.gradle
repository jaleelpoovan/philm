buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
    }
}
apply plugin: 'com.android.application'

repositories {
    jcenter()
}

def buildTime() {
    return new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))
}

def versionMajor = 0
def versionMinor = 6
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

android {
    compileSdkVersion 26
    buildToolsVersion "27.0.0"

    defaultConfig {
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        minSdkVersion 15
        targetSdkVersion 21

        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            versionNameSuffix "-debug"
        }

        release {
            minifyEnabled false
            proguardFile getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        defaultFlavor {
            proguardFile 'proguard-rules.txt'
        }
    }

    lintOptions {
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

dependencies {
    compile project(':lib')

    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support:design:26.1.0'
    compile 'com.android.support:palette-v7:26.1.0'
    compile 'com.android.support:cardview-v7:26.1.0'

    compile 'com.genius:groupie:0.6.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'nl.qbusict:cupboard:2.1.1'
    compile 'com.github.castorflex.smoothprogressbar:library:0.4.0'
    compile 'com.github.chrisbanes.photoview:library:1.2.4'

    annotationProcessor 'com.squareup.dagger:dagger-compiler:1.2.5'

    compile fileTree(dir: 'libs', include: '*.jar')
}

File propFile = file('signing.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}

